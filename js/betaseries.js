// Generated by CoffeeScript 1.3.3
var Controller, View, View_Episode, View_EpisodeComments, View_MemberPlanning, View_Menu, View_MyEpisodes, View_Show, View_ShowEpisodes, menu,
  __slice = [].slice,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

menu = {
  show: function() {
    return $('.action').show();
  },
  hide: function() {
    return $('.action').hide();
  },
  hideStatus: function() {
    return $('#status').hide();
  },
  hideMenu: function() {
    return $('#menu').hide();
  }
};

Controller = (function() {

  function Controller() {}

  Controller.prototype.currentView = null;

  Controller.prototype.load = function() {
    var force, o, outdated, params, sameView, time, view, views;
    view = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    o = new window['View_' + view];
    if (o.init != null) {
      o.init.apply(this, params);
    }
    sameView = (this.currentView != null) && o.id === this.currentView.id;
    this.currentView = o;
    if (!sameView) {
      this.display();
    }
    if (o.update != null) {
      $('#sync').show();
      time = (new Date().getDate()) + '.' + (new Date().getFullYear());
      views = DB.get('views', {});
      outdated = views[o.id] != null ? views[o.id].time !== time : true;
      force = views[o.id] != null ? views[o.id].force : true;
      if (outdated || force) {
        return this.update();
      }
    } else {
      return $('#sync').hide();
    }
  };

  Controller.prototype.update = function() {
    var o, params,
      _this = this;
    o = this.currentView;
    params = o.params || '';
    if (o.url != null) {
      return ajax.post(o.url, params, function(data) {
        var cache, time, views;
        cache = data.root[o.root];
        Cache.maintenance(data.root.code);
        time = (new Date().getDate()) + '.' + (new Date().getFullYear());
        views = DB.get('views', {});
        views[o.id] = {
          time: time,
          force: false
        };
        DB.set('views', views);
        o.update(cache);
        return _this.display();
      });
    } else {
      return o.update();
    }
  };

  Controller.prototype.display = function() {
    var o;
    o = this.currentView;
    if (bgPage.logged()) {
      Historic.save();
    }
    $('#page').html('');
    if (o.content) {
      $('#page').html(o.content());
    }
    $('#title').text(__('title_' + o.name));
    $('#page').removeClass().addClass(o.name);
    return Fx.updateHeight();
  };

  Controller.prototype.refresh = function() {
    var args;
    Fx.toUpdate(this.currentView.id);
    args = this.currentView.id.split('.');
    return this.load.apply(this, args);
  };

  return Controller;

})();

View = (function() {

  function View() {}

  View.prototype.id = null;

  View.prototype.name = null;

  View.prototype.url = null;

  View.prototype.params = null;

  View.prototype.root = null;

  return View;

})();

View_Show = (function(_super) {

  __extends(View_Show, _super);

  function View_Show() {
    this.init = __bind(this.init, this);
    return View_Show.__super__.constructor.apply(this, arguments);
  }

  View_Show.prototype.init = function(url) {
    this.id = 'Show.' + url;
    this.url = '/shows/display/' + url;
    return this.show = url;
  };

  View_Show.prototype.name = 'Show';

  View_Show.prototype.root = 'show';

  View_Show.prototype.login = DB.get('session').login;

  View_Show.prototype.update = function(data) {
    data.is_in_account = data.is_in_account === "1";
    data.archive = data.archive === "1";
    return DB.set('show.' + this.show, data);
  };

  View_Show.prototype.content = function() {
    var data, genres, i, k, note, output, v, _i, _ref, _ref1;
    data = DB.get('show.' + this.show, null);
    if (!data) {
      return Fx.needUpdate();
    }
    output = '<div class="title">';
    output += '<div class="fleft200">' + data.title + '</div>';
    output += '<div class="fright200 aright">';
    if (data.note != null) {
      note = Math.floor(data.note.mean);
      for (i = _i = 1; 1 <= note ? _i <= note : _i >= note; i = 1 <= note ? ++_i : --_i) {
        output += '<img src="../img/star.gif" /> ';
      }
    }
    output += '</div>';
    output += '<div class="clear"></div>';
    output += '</div>';
    output += '<div>';
    output += '<div class="fleft200">';
    genres = [];
    _ref = data.genres;
    for (k in _ref) {
      v = _ref[k];
      genres.push(v);
    }
    output += genres.join(', ') + ' | ';
    if (data.status != null) {
      output += __(data.status.toLowerCase());
    }
    output += '</div>';
    output += '<div class="fright200 aright">';
    if (((_ref1 = data.note) != null ? _ref1.mean : void 0) != null) {
      output += data.note.mean + '/5 (' + data.note.members + ')';
    }
    output += '</div>';
    output += '</div>';
    if (data.banner != null) {
      output += '<img src="' + data.banner + '" width="290" height="70" alt="banner" style="margin-top: 10px;" />';
    }
    if (data.description != null) {
      output += '<div class="title2">' + __('synopsis') + '</div>';
      output += '<div style="margin-right:5px; text-align:justify;">' + data.description + '</div>';
    }
    output += '<div class="title2">' + __('actions') + '</div>';
    output += '<a href="" class="link display_episodes" url="' + data.url + '"><span class="imgSyncNo"></span>Voir les Ã©pisodes</a>';
    if (data.is_in_account && data.archive) {
      output += '<a href="#' + data.url + '" id="showsUnarchive" class="link">' + '<span class="imgSyncOff"></span>' + __('show_unarchive') + '</a>';
    } else if (data.is_in_account && !data.archive) {
      output += '<a href="#' + data.url + '" id="showsArchive" class="link">' + '<span class="imgSyncOff"></span>' + __('show_archive') + '</a>';
    }
    if (data.is_in_account) {
      output += '<a href="#' + data.url + '" id="showsRemove" class="link">' + '<span class="imgSyncOff"></span>' + __('show_remove') + '</a>';
    } else {
      output += '<a href="#' + data.url + '" id="showsAdd" class="link">' + '<span class="imgSyncOff"></span>' + __('show_add') + '</a>';
    }
    return output;
  };

  return View_Show;

})(View);

View_ShowEpisodes = (function(_super) {

  __extends(View_ShowEpisodes, _super);

  function View_ShowEpisodes() {
    this.init = __bind(this.init, this);
    return View_ShowEpisodes.__super__.constructor.apply(this, arguments);
  }

  View_ShowEpisodes.prototype.init = function(url) {
    this.id = 'ShowEpisodes.' + url;
    this.url = '/shows/episodes/' + url;
    this.episodes = DB.get('show.' + url + '.episodes');
    return this.show = url;
  };

  View_ShowEpisodes.prototype.name = 'ShowEpisodes';

  View_ShowEpisodes.prototype.params = '&summary=1&hide_notes=1';

  View_ShowEpisodes.prototype.root = 'seasons';

  View_ShowEpisodes.prototype.login = DB.get('session').login;

  View_ShowEpisodes.prototype.update = function(data) {
    var e, i, j, n, seasons, showEpisodes, shows, _ref;
    shows = DB.get('member.' + this.login + '.shows', {});
    if (this.show in shows) {
      shows[this.show].archive = false;
    } else {
      shows[this.show] = {
        url: this.show,
        archive: false,
        hidden: false
      };
    }
    showEpisodes = DB.get('show.' + this.show + '.episodes', {});
    for (i in data) {
      seasons = data[i];
      _ref = seasons.episodes;
      for (j in _ref) {
        e = _ref[j];
        n = Fx.splitNumber(e.number);
        showEpisodes[e.global] = {
          comments: e.comments,
          date: e.date,
          downloaded: e.downloaded === '1',
          episode: n.episode,
          global: e.global,
          number: e.number,
          season: n.season,
          title: e.title,
          show: this.show,
          url: this.show
        };
      }
    }
    DB.set('show.' + this.show + '.episodes', showEpisodes);
    return DB.set('member.' + this.login + '.shows', shows);
  };

  View_ShowEpisodes.prototype.content = function() {
    var classHidden, data, e, episodes, hidden, i, lastSeason, nbrEpisodes, output, s, season, seasons, shows, start;
    data = DB.get('show.' + this.show + '.episodes', null);
    if (!data) {
      return Fx.needUpdate();
    }
    episodes = DB.get('member.' + this.login + '.episodes', null);
    if (!episodes) {
      return Fx.needUpdate();
    }
    shows = DB.get('member.' + this.login + '.shows', null);
    if (!shows) {
      return Fx.needUpdate();
    }
    s = shows[this.show];
    seasons = {};
    lastSeason = -1;
    nbrEpisodes = 0;
    for (i in data) {
      e = data[i];
      nbrEpisodes++;
      lastSeason = e.season;
      if (e.season in seasons) {
        seasons[e.season]++;
      } else {
        seasons[e.season] = 1;
      }
    }
    start = this.show in episodes ? episodes[this.show].start : nbrEpisodes;
    output = '<div id="' + this.show + '" class="show" start="' + start + '">';
    season = -1;
    for (i in data) {
      e = data[i];
      hidden = e.season !== lastSeason;
      classHidden = hidden ? ' hidden' : '';
      if (e.season !== season) {
        if (season !== -1) {
          output += '</div>';
        }
        output += '<div class="season' + classHidden + '" id="season' + e.season + '">';
        output += Content.season(e.season, seasons[e.season], hidden);
        season = e.season;
      }
      output += Content.episode(e, s.title, hidden, start);
    }
    output += '</div></div>';
    return output;
  };

  return View_ShowEpisodes;

})(View);

View_Episode = (function(_super) {

  __extends(View_Episode, _super);

  function View_Episode() {
    this.init = __bind(this.init, this);
    return View_Episode.__super__.constructor.apply(this, arguments);
  }

  View_Episode.prototype.init = function(url, season, episode, global) {
    this.id = 'Episode.' + url + '.' + season + '.' + episode + '.' + global;
    this.url = '/shows/episodes/' + url;
    this.params = '&season=' + season + '&episode=' + episode;
    this.episodes = DB.get('show.' + url + '.episodes');
    this.show = url;
    return this.global = global;
  };

  View_Episode.prototype.name = 'Episode';

  View_Episode.prototype.root = 'seasons';

  View_Episode.prototype.update = function(data) {
    var e, ep, eps;
    e = data['0']['episodes']['0'];
    eps = this.episodes != null ? this.episodes : {};
    ep = this.global in eps ? eps[this.global] : {};
    if (e.comments != null) {
      ep.comments = e.comments;
    }
    if (e.date != null) {
      ep.date = e.date;
    }
    if (e.description != null) {
      ep.description = e.description;
    }
    if (e.downloaded != null) {
      ep.downloaded = e.downloaded;
    }
    if (e.episode != null) {
      ep.episode = e.episode;
    }
    if (e.global != null) {
      ep.global = e.global;
    }
    if (e.number != null) {
      ep.number = e.number;
    }
    if (e.screen != null) {
      ep.screen = e.screen;
    }
    if (e.show != null) {
      ep.show = e.show;
    }
    if (e.subs != null) {
      ep.subs = e.subs;
    }
    if (e.title != null) {
      ep.title = e.title;
    }
    ep.url = this.show;
    eps[this.global] = ep;
    DB.set('show.' + this.show + '.episodes', eps);
    return this.episodes = eps;
  };

  View_Episode.prototype.content = function() {
    var dl, e, i, n, nbr_subs, note, output, sub, title, _i, _ref, _ref1;
    if (!(((_ref = this.episodes) != null ? _ref[this.global] : void 0) != null)) {
      return Fx.needUpdate();
    }
    e = this.episodes[this.global];
    title = DB.get('options').display_global ? '#' + e.global + ' ' + e.title : e.title;
    output = '<div class="title">';
    output += '<div class="fleft200"><a href="" url="' + this.show + '" class="showtitle display_show">' + e.show + '</a></div>';
    output += '<div class="fright200 aright">';
    if (e.note != null) {
      note = Math.floor(e.note.mean);
      for (i = _i = 1; 1 <= note ? _i <= note : _i >= note; i = 1 <= note ? ++_i : --_i) {
        output += '<img src="../img/star.gif" /> ';
      }
    }
    output += '</div>';
    output += '<div class="clear"></div>';
    output += '</div>';
    output += '<div>';
    output += ' <div class="fleft200">';
    output += '  <span class="num">' + Fx.displayNumber(e.number) + '</span> ' + e.title;
    output += ' </div>';
    if (((_ref1 = e.note) != null ? _ref1.mean : void 0) != null) {
      output += ' <div class="fright200 aright">' + e.note.mean + '/5 (' + e.note.members + ')' + '</div>';
    }
    output += ' <div class="clear"></div>';
    output += '</div>';
    if (e.screen != null) {
      output += '<div style="height: 70px; overflow: hidden; margin-top: 10px;"><img src="' + e.screen + '" style="width: 290px; margin-top: -15px;" /></div>';
    }
    if (e.description != null) {
      output += '<div class="title2">' + __('synopsis') + '</div>';
      output += '<div style="text-align: justify; margin-right: 5px;">' + e.description + '</div>';
    }
    if ((e.subs != null) && Object.keys(e.subs).length > 0) {
      output += '<div class="title2">' + __('subtitles') + '</div>';
      nbr_subs = 0;
      for (n in e.subs) {
        sub = e.subs[n];
        output += '[' + sub.quality + '] ' + sub.language + ' <a href="" class="subs" title="' + sub.file + '" link="' + sub.url + '">' + Fx.subLast(sub.file, 20) + '</a> (' + sub.source + ')<br />';
        nbr_subs++;
      }
    }
    output += '<div class="title2">' + __('actions') + '</div>';
    output += '<a href="" url="' + e.url + '" season="' + e.season + '" episode="' + e.episode + '" global="' + e.global + '" class="link display_comments">';
    output += '<span class="imgSyncNo"></span>' + __('see_comments', e.comments) + '</a>';
    dl = e.downloaded ? 'mark_as_not_dl' : 'mark_as_dl';
    output += '<a href="" show="' + e.url + '" season="' + e.season + '" episode="' + e.episode + '" global="' + e.global + '" class="link downloaded">';
    output += '<span class="imgSyncOff"></span>' + __(dl) + '</a>';
    return output;
  };

  return View_Episode;

})(View);

View_MemberPlanning = (function(_super) {

  __extends(View_MemberPlanning, _super);

  function View_MemberPlanning() {
    this.init = __bind(this.init, this);
    return View_MemberPlanning.__super__.constructor.apply(this, arguments);
  }

  View_MemberPlanning.prototype.init = function(login) {
    if (login == null) {
      login = DB.get('session').login;
    }
    this.id = 'MemberPlanning.' + login;
    this.url = '/planning/member/' + login;
    return this.login = login;
  };

  View_MemberPlanning.prototype.name = 'MemberPlanning';

  View_MemberPlanning.prototype.params = "&view=unseen";

  View_MemberPlanning.prototype.root = 'planning';

  View_MemberPlanning.prototype.update = function(data) {
    return DB.set('member.' + this.login + '.planning', data);
  };

  View_MemberPlanning.prototype.content = function() {
    var actualWeek, data, diffWeek, e, hidden, nbrEpisodes, output, plot, titleIcon, today, todayWeek, visibleIcon, w, week;
    output = '';
    week = 100;
    nbrEpisodes = 0;
    data = DB.get('member.' + this.login + '.planning', null);
    if (!data) {
      return Fx.needUpdate();
    }
    for (e in data) {
      today = Math.floor(new Date().getTime() / 1000);
      todayWeek = parseFloat(date('W', today));
      actualWeek = parseFloat(date('W', data[e].date));
      diffWeek = actualWeek - todayWeek;
      plot = data[e].date < today ? "tick" : "empty";
      if (diffWeek < -2 || diffWeek > 2) {
        continue;
      }
      if (actualWeek !== week) {
        week = actualWeek;
        if (diffWeek < -1) {
          w = __('weeks_ago', [Math.abs(diffWeek)]);
          hidden = true;
        } else if (diffWeek === -1) {
          w = __('last_week');
          hidden = true;
        } else if (diffWeek === 0) {
          w = __('this_week');
          hidden = false;
        } else if (diffWeek === 1) {
          w = __('next_week');
        } else if (diffWeek > 1) {
          w = __('next_weeks', [diffWeek]);
          hidden = false;
        }
        if (nbrEpisodes > 0) {
          output += '</div>';
        }
        visibleIcon = hidden ? '../img/arrow_right.gif' : '../img/arrow_down.gif';
        titleIcon = hidden ? __('maximise') : __('minimise');
        hidden = hidden ? ' hidden' : '';
        output += '<div class="week' + hidden + '">';
        output += '<div class="title"> ';
        output += '<img src="' + visibleIcon + '" class="toggleWeek" title="' + titleIcon + '" />';
        output += w + '</div>';
      }
      output += '<div class="episode ' + date('D', data[e].date).toLowerCase() + hidden + '">';
      output += '<div class="td wrapper-seen">';
      output += '<img src="../img/' + plot + '.png" width="11" />';
      output += '</div>';
      output += '<div class="td wrapper-title" style="width: 186px;">';
      output += '<span class="num">' + Fx.displayNumber(data[e].number) + '</span> ';
      output += '<a href="" url="' + data[e].url + '" season="' + data[e].season + '" episode="' + data[e].episode + '" global="' + data[e].global + '" title="' + data[e].show + '" class="epLink display_episode">';
      output += data[e].show + '</a>';
      output += '</div>';
      output += '<div class="td wrapper-date">';
      output += '<span class="date">' + date('D d F', data[e].date) + '</span>';
      output += '</div>';
      output += '</div>';
      nbrEpisodes++;
    }
    return output;
  };

  'membersInfos: (login) ->\n	login ?= DB.get(\'session\').login\n	\n	id: \'membersInfos.\' + login\n	name: \'membersInfos\'\n	url: \'/members/infos/\' + login\n	root: \'member\'\n	login: login\n	update: (data) ->\n		member = DB.get \'member.\' + @login + \'.infos\', {}\n		member.login = data.login\n		member.is_in_account = data.is_in_account\n		member.avatar = data.avatar\n		member.stats = data.stats\n		DB.set \'member.\' + @login + \'.infos\', member\n	content: ->\n		data = DB.get \'member.\' + @login + \'.infos\', null\n		return Fx.needUpdate() if !data\n		\n		if data.avatar? and data.avatar isnt \'\'\n			avatar = new Image\n			avatar.src = data.avatar\n			avatar.onload = ->\n				$(\'#avatar\').attr \'src\', data.avatar\n		\n		output = \'\'\n		output += \'<div class="title">\' + data.login + \'</div>\'\n		output += \'<img src="../img/avatar.png" width="50" id="avatar" style="position:absolute; right:0;" />\'\n		output += \'<div class="episode lun"><img src="../img/infos.png" class="icon"> \' + __(\'nbr_friends\', [data.stats.friends]) + \' </div>\'\n		output += \'<div class="episode lun"><img src="../img/medal.png" class="icon"> \' + __(\'nbr_badges\', [data.stats.badges]) + \' </div>\'\n		output += \'<div class="episode lun"><img src="../img/episodes.png" class="icon"> \' + __(\'nbr_shows\', [data.stats.shows]) + \' </div>\'\n		output += \'<div class="episode lun"><img src="../img/report.png" class="icon"> \' + __(\'nbr_seasons\', [data.stats.seasons]) + \' </div>\'\n		output += \'<div class="episode lun"><img src="../img/script.png" class="icon"> \' + __(\'nbr_episodes\', [data.stats.episodes]) + \' </div>\'\n		output += \'<div class="episode lun"><img src="../img/location.png" class="icon">\' + data.stats.progress + \' <small>(\' + __(\'progress\') + \')</small></div>\'\n		\n		if data.is_in_account?\n			output += \'<div class="title2">\' + __(\'actions\') + \'</div>\'\n			if data.is_in_account\n				output += \'<a href="#\' + data.login + \'" id="friendsRemove" class="link">\' + \'<span class="imgSyncOff"></span>\' + __(\'remove_to_friends\', [data.login]) + \'</a>\'\n			else\n				output += \'<a href="#\' + data.login + \'" id="friendsAdd" class="link">\' + \'<span class="imgSyncOff"></span>\' + __(\'add_to_friends\', [data.login]) + \'</a>\'\n		\n		return output\n\nmembersShows: (login) ->\n	login ?= DB.get(\'session\').login\n	\n	id: \'membersShows.\' + login\n	name: \'membersShows\'\n	url: \'/members/infos/\' + login\n	root: \'member\'\n	login: login\n	update: (data) ->\n		shows = DB.get \'member.\' + @login + \'.shows\', {}\n		for i, s of data.shows\n			if s.url of shows\n				# cas oÃ¹ on enlÃ¨ve une sÃ©rie des archives depuis le site\n				shows[s.url].archive = s.archive\n			else\n				shows[s.url] =\n					url: s.url\n					title: s.title\n					archive: s.archive\n					hidden: false\n		DB.set \'member.\' + @login + \'.shows\', shows\n	content: ->\n		data = DB.get \'member.\' + @login + \'.shows\', null\n		return Fx.needUpdate() if !data\n		\n		output = \'\'\n		for i, show of data\n			output += \'<div class="episode" id="\' + show.url + \'">\'\n			if show.archive is \'1\'\n				output += \'<img src="../img/folder_off.png" class="icon-3" /> \'\n			else\n				output += \'<img src="../img/folder.png" class="icon-3" /> \'\n			output += \'<a href="" url="\' + show.url + \'" class="epLink display_show">\' + show.title + \'</a>\'\n			output += \'</div>\'\n		return output';


  return View_MemberPlanning;

})(View);

View_MyEpisodes = (function(_super) {

  __extends(View_MyEpisodes, _super);

  function View_MyEpisodes() {
    this.init = __bind(this.init, this);
    return View_MyEpisodes.__super__.constructor.apply(this, arguments);
  }

  View_MyEpisodes.prototype.init = function(lang) {
    if (lang == null) {
      lang = 'all';
    }
    this.id = 'MyEpisodes.' + lang;
    return this.url = '/members/episodes/' + lang;
  };

  View_MyEpisodes.prototype.name = 'MyEpisodes';

  View_MyEpisodes.prototype.root = 'episodes';

  View_MyEpisodes.prototype.login = DB.get('session').login;

  View_MyEpisodes.prototype.update = function(data) {
    var d, e, j, memberEpisodes, showEpisodes, shows, time, today;
    shows = DB.get('member.' + this.login + '.shows', {});
    memberEpisodes = {};
    time = Math.floor(new Date().getTime() / 1000);
    j = 0;
    for (d in data) {
      e = data[d];
      if (time - e.date < 24 * 3600) {
        continue;
      }
      if (e.url in shows) {
        shows[e.url].archive = false;
      } else {
        shows[e.url] = {
          url: e.url,
          title: e.show,
          archive: false,
          hidden: false
        };
      }
      showEpisodes = DB.get('show.' + e.url + '.episodes', {});
      showEpisodes[e.global] = {
        comments: e.comments,
        date: e.date,
        downloaded: e.downloaded === '1',
        episode: e.episode,
        global: e.global,
        number: e.number,
        season: e.season,
        title: e.title,
        show: e.show,
        url: e.url,
        subs: e.subs,
        note: e.note.mean
      };
      DB.set('show.' + e.url + '.episodes', showEpisodes);
      if (e.url in memberEpisodes) {
        today = Math.floor(new Date().getTime() / 1000);
        if (e.date <= today) {
          memberEpisodes[e.url].nbr_total++;
        }
      } else {
        memberEpisodes[e.url] = {
          start: e.global,
          nbr_total: 1
        };
      }
      j++;
    }
    DB.set('member.' + this.login + '.shows', shows);
    DB.set('member.' + this.login + '.episodes', memberEpisodes);
    return bgPage.Badge.set('total_episodes', j);
  };

  View_MyEpisodes.prototype.content = function() {
    var data, e, global, i, j, nbr, nbr_episodes_per_serie, output, s, showEpisodes, shows, today;
    data = DB.get('member.' + this.login + '.episodes', null);
    if (!data) {
      return Fx.needUpdate();
    }
    shows = DB.get('member.' + this.login + '.shows', null);
    if (!shows) {
      return Fx.needUpdate();
    }
    if (bgPage.logged()) {
      if (DB.get('options').display_notifications_icon) {
        nbr = Fx.checkNotifications();
        if (nbr > 0) {
          $('.notif').html(nbr).show();
        }
      } else {
        $('#notifications').hide();
      }
    }
    bgPage.Badge.set('new_episodes', 0);
    DB.set('new_episodes_checked', date('Y.m.d'));
    output = '<div id="shows">';
    for (i in data) {
      j = data[i];
      s = shows[i];
      output += '<div id="' + i + '" class="show">';
      output += Content.show(s, j.nbr_total);
      nbr_episodes_per_serie = DB.get('options').nbr_episodes_per_serie;
      showEpisodes = DB.get('show.' + i + '.episodes');
      global = j.start;
      while (global in showEpisodes && global - j.start < nbr_episodes_per_serie) {
        e = showEpisodes[global];
        today = Math.floor(new Date().getTime() / 1000);
        global++;
        if (e.date <= today) {
          output += Content.episode(e, s.title, s.hidden);
        }
      }
      output += '</div>';
    }
    /*
    		output += '<div id="noEpisodes">'
    		output += __('no_episodes_to_see') 
    		output += '<br /><br /><a href="#" onclick="BS.load(\'searchForm\').display(); return false;">'
    		output += '<img src="../img/film_add.png" class="icon2" />' + __('add_a_show') + '</a>'
    		output += '</div>'
    */

    output += '</div>';
    return output;
  };

  'membersNotifications: () ->\nid: \'membersNotifications\'\nname: \'membersNotifications\'\nurl: \'/members/notifications\'\nroot: \'notifications\'\nlogin: DB.get(\'session\').login\nupdate: (data) ->\n	old_notifs = DB.get \'member.\' + @login + \'.notifs\', []\n	new_notifs = Fx.formatNotifications data\n	n = Fx.concatNotifications old_notifs, new_notifs\n	n = Fx.sortNotifications n\n	DB.set \'member.\' + @login + \'.notifs\', n\n	bgPage.Badge.set \'notifs\', 0\ncontent: ->\n	output = \'\'\n	nbrNotifications = 0\n	currDate = \'\'\n	\n	data = DB.get \'member.\' + @login + \'.notifs\', null\n	return Fx.needUpdate() if !data\n	\n	time = Math.floor (new Date().getTime() / 1000)\n	for n in data\n		continue if time < n.date\n		newDate = date(\'D d F\', n.date)\n		if newDate isnt currDate\n			currDate = newDate\n			output += \'<div class="showtitle">\' + currDate + \'</div>\'\n		output += \'<div class="event \' + date(\'D\', n.date).toLowerCase() + \'">\'\n		output += \'<span class="new">\' + __(\'new\') + \'</span> \' if !n.seen\n		output += n.html\n		output += \'</div>\'\n		data[n].seen = true\n		nbrNotifications++	\n\n	# on marque les notifications comme lus\n	DB.set \'member.\' + @login + \'.notifs\', data\n	$(\'.notif\').html(0).hide()\n	\n	output += __(\'no_notifications\') if nbrNotifications is 0\n	return output';


  return View_MyEpisodes;

})(View);

View_EpisodeComments = (function(_super) {

  __extends(View_EpisodeComments, _super);

  function View_EpisodeComments() {
    this.init = __bind(this.init, this);
    return View_EpisodeComments.__super__.constructor.apply(this, arguments);
  }

  View_EpisodeComments.prototype.init = function(url, season, episode, global) {
    this.id = 'EpisodeComments.' + url + '.' + season + '.' + episode + '.' + global;
    this.url = '/comments/episode/' + url;
    this.params = '&season=' + season + '&episode=' + episode;
    this.show = url;
    this.season = season;
    this.episode = episode;
    return this.global = global;
  };

  View_EpisodeComments.prototype.name = 'EpisodeComments';

  View_EpisodeComments.prototype.root = 'comments';

  View_EpisodeComments.prototype.update = function(data) {
    var comment, comments, i, nbrComments;
    comments = DB.get('show.' + this.show + '.' + this.global + '.comments', {});
    nbrComments = comments.length;
    for (i in data) {
      comment = data[i];
      if (i < nbrComments) {
        continue;
      } else {
        comments[i] = comment;
      }
    }
    return DB.set('show.' + this.show + '.' + this.global + '.comments', comments);
  };

  View_EpisodeComments.prototype.content = function() {
    var data, i, n, new_date, output, show, time;
    i = 1;
    time = '';
    show = '';
    output = '<div class="showtitle">' + show + '</div>';
    data = DB.get('show.' + this.show + '.' + this.global + '.comments', null);
    if (!data) {
      return Fx.needUpdate();
    }
    for (n in data) {
      new_date = date('D d F', data[n].date);
      if (new_date !== time) {
        time = new_date;
        output += '<div class="showtitle">' + time + '</div>';
      }
      output += '<div class="event ' + date('D', data[n].date).toLowerCase() + '">';
      output += '<b>' + date('H:i', data[n].date) + '</b> ';
      output += '<span class="login">' + data[n].login + '</span> ';
      output += '<small>#' + data[n].inner_id + '</small> ';
      if (data[n].in_reply_to !== '0') {
        output += '<small>en rÃ©ponse Ã  #' + data[n].in_reply_to + '</small> ';
      }
      output += '<a href="" id="addInReplyTo" commentId="' + data[n].inner_id + '">rÃ©pondre</a><br />';
      output += data[n].text;
      output += '</div>';
      i++;
    }
    output += '<div class="postComment">';
    output += '<form method="post" id="postComment">';
    output += '<input type="hidden" id="show" value="' + this.show + '" />';
    output += '<input type="hidden" id="season" value="' + this.season + '" />';
    output += '<input type="hidden" id="episode" value="' + this.episode + '" />';
    output += '<input type="hidden" id="inReplyTo" value="0" />';
    output += '<textarea name="comment" placeholder="Votre commentaire.."></textarea>';
    output += '<input type="submit" name="submit" value="Poster">';
    output += '<div id="inReplyToText" style="display:none;">En rÃ©ponse Ã  #<span id="inReplyToId"></span> ';
    output += '(<a href="" id="removeInReplyTo">enlever</a>)</div>';
    output += '</form>';
    output += '<div class="clear"></div>\
				   </div>';
    if (i === 1) {
      output += __('no_comments');
    }
    return output;
  };

  'timelineFriends: ->\n	id: \'timelineFriends\'\n	name: \'timelineFriends\'\n	url: \'/timeline/friends\'\n	params: \'&number=10\'\n	root: \'timeline\'\n	login: DB.get(\'session\').login\n	update: (data) ->\n		DB.set \'member.\' + @login + \'.timeline\', data\n	content: ->\n		output = \'\'\n		time = \'\'\n		\n		data = DB.get \'member.\' + @login + \'.timeline\', null\n		return Fx.needUpdate() if !data\n		\n		for n of data\n			new_date = date(\'D d F\', data[n].date)\n			if new_date isnt time\n				time = new_date\n				output += \'<div class="title">\' + time + \'</div>\'\n			\n			output += \'<div class="event \' + date(\'D\', data[n].date).toLowerCase() + \'">\'\n			output += \'<b>\' + date(\'H:i\', data[n].date) + \'</b> \'\n			output += \'<span class="login">\' + data[n].login + \'</span> \' + data[n].html\n			output += \'</div>\'\n		return output\n\n#\nconnection: ->\n	id: \'connection\'\n	name: \'connection\'\n	content: ->\n		menu.hide()\n		output = \'<div style="height:10px;"></div>\';\n		output += \'<form id="connect">\'\n		output += \'<table><tr><td>\' + __(\'login\') + \'</td><td><input type="text" name="login" id="login" /></td></tr>\'\n		output += \'<tr><td>\' + __(\'password\') + \'</td><td><input type="password" name="password" id="password" /></td></tr>\'\n		output += \'</table>\'\n		output += \'<div class="valid"><input type="submit" value="\' + __(\'sign_in\') + \'"> ou \'\n		output += \'	<a href="" class="display_registration">\' + __(\'sign_up\') + \'</a></div>\'\n		output += \'</form>\'\n		return output\n\n#\nregistration: ->\n	id: \'registration\'\n	name: \'registration\'\n	content: ->\n		menu.hide()\n		output = \'<div style="height:10px;"></div>\';\n		output += \'<form id="register">\'\n		output += \'<table><tr><td>\' + __(\'login\') + \'</td><td><input type="text" name="login" id="login" /></td></tr>\'\n		output += \'<tr><td>\' + __(\'password\') + \'</td><td><input type="password" name="password" id="password" /></td></tr>\'\n		output += \'<tr><td>\' + __(\'repassword\') + \'</td><td><input type="password" name="repassword" id="repassword" /></td></tr>\'\n		output += \'<tr><td>\' + __(\'email\') + \'</td><td><input type="text" name="mail" id="mail" /></td></tr>\'\n		output += \'</table>\'\n		output += \'<div class="valid"><input type="submit" value="\' + __(\'sign_up\') + \'"> ou \'\n		output += \'	<a href="#" class="display_connection">\' + __(\'sign_in\') + \'</a></div>\'\n		output += \'</form>\'\n		return output\n\n#\nsearchShow: ->\n	id: \'searchShow\'\n	name: \'searchShow\'\n	content: ->\n		output = \'<div style="height:10px;"></div>\';\n		output += \'<form id="searchForShow">\'\n		output += \'<input type="text" name="terms" id="terms" /> \'\n		output += \'<input type="submit" value="chercher" />\'\n		output += \'</form>\'\n		output += \'<div id="results"></div>\'\n		setTimeout (() -> $(\'#terms\').focus()), 100\n		return output\n		\n#\nsearchMember: ->\n	id: \'searchMember\'\n	name: \'searchMember\'\n	content: ->\n		output = \'<div style="height:10px;"></div>\';\n		output += \'<form id="searchForMember">\'\n		output += \'<input type="text" name="terms" id="terms" /> \'\n		output += \'<input type="submit" value="chercher" />\'\n		output += \'</form>\'\n		output += \'<div id="results"></div>\'\n		setTimeout (() -> $(\'#terms\').focus()), 100\n		return output\n\n#\nblog: ->\n	id: \'blog\'\n	name: \'blog\'\n	update: ->\n		$.ajax\n			type: \'GET\'\n			url: \'https://www.betaseries.com/blog/feed/\'\n			dataType: \'xml\'\n			async: false\n			success: (data) ->\n				items = $(data).find \'item\'\n				blog = []\n				for i in [0..(Math.min 10, items.length)]\n					item = $(items[i])\n					article = {}\n					article.title = item.find(\'title\').text()\n					article.description = item.find(\'description\').text()\n					article.link = item.find(\'link\').text()\n					blog.push article\n				# on met Ã  jour le cache\n				DB.set \'blog\', blog\n				# on mets Ã  jour l\'affichage\n				BS.display()\n	content: ->\n		output = \'\'\n		\n		data = DB.get \'blog\', null\n		return Fx.needUpdate() if !data\n		\n		for article, i in data\n			title = article.title.substring 0, 40\n			title += \'..\' if article.title.length > 40\n			\n			output += \'<div class="showtitle">\' + title\n			#output += \' <span class="date">\'+date(\'D d F\', data[n].date)+\'</span>\';\n			output += \'</div>\'\n			\n			link = \'<a href="#" link="\' + article.link + \'" class="display_postblog">(\' + __(\'read_article\') + \')</a>\'\n			output += \'<div>\' + article.description.replace(/<a(.*)a>/, link) + \'</div>\'\n			\n			output += \'<div style="height:11px;"></div>\'\n					\n		return output';


  return View_EpisodeComments;

})(View);

View_Menu = (function(_super) {

  __extends(View_Menu, _super);

  function View_Menu() {
    return View_Menu.__super__.constructor.apply(this, arguments);
  }

  View_Menu.prototype.id = 'Menu';

  View_Menu.prototype.name = 'Menu';

  View_Menu.prototype.content = function() {
    var m, menu_order, output, style, _i, _len;
    output = '';
    menu_order = DB.get('options').menu_order;
    for (_i = 0, _len = menu_order.length; _i < _len; _i++) {
      m = menu_order[_i];
      if (!m.visible) {
        continue;
      }
      style = '';
      if (m.img_style != null) {
        style = 'style="' + m.img_style + '" ';
      }
      output += '<a href="" id="menu-' + m.name + '" class="menulink">';
      output += '<img src="' + m.img_path + '" ' + style + '/>';
      output += __('menu_' + m.name) + '</a>';
    }
    return output;
  };

  return View_Menu;

})(View);

'	logout: ->\najax.post \'/members/destroy\', \'\',\n	->\n		DB.removeAll()\n		DB.init()\n		bgPage.Badge.init()\n		BS.load(\'connection\')\n	->\n		DB.removeAll()\n		DB.init()\n		bgPage.Badge.init()\n		BS.load(\'connection\')\nreturn false';

