// Generated by CoffeeScript 1.3.3
var Controller, View, View_Blog, View_Connection, View_Member, View_MemberNotifications, View_MemberPlanning, View_MemberShows, View_MemberTimeline, View_Registration, View_Search, View_ShowEpisodes, menu,
  __slice = [].slice,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

menu = {
  show: function() {
    return $('.action').show();
  },
  hide: function() {
    return $('.action').hide();
  },
  hideStatus: function() {
    return $('#status').hide();
  },
  hideMenu: function() {
    return $('#menu').hide();
  }
};

Controller = (function() {

  function Controller() {}

  Controller.prototype.currentView = null;

  Controller.prototype.start = function() {
    DB.init();
    Fx.checkVersion();
    if (Fx.logged()) {
      return BS.load("MyEpisodes");
    } else {
      return BS.load("Connection");
    }
  };

  Controller.prototype.load = function() {
    var force, o, outdated, params, sameView, time, view, views;
    view = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    o = new window['View_' + view];
    if (o.init != null) {
      o.init.apply(this, params);
    }
    sameView = (this.currentView != null) && o.id === this.currentView.id;
    this.currentView = o;
    if (!sameView) {
      this.display();
    }
    if (o.update != null) {
      $('#sync').show();
      time = (new Date().getDate()) + '.' + (new Date().getFullYear());
      views = DB.get('views', {});
      outdated = views[o.id] != null ? views[o.id].time !== time : true;
      force = views[o.id] != null ? views[o.id].force : true;
      if (outdated || force) {
        return this.update();
      }
    } else {
      return $('#sync').hide();
    }
  };

  Controller.prototype.update = function() {
    var o, params,
      _this = this;
    o = this.currentView;
    params = o.params || '';
    if (o.url != null) {
      return ajax.post(o.url, params, function(data) {
        var cache, time, views;
        cache = data.root[o.root];
        Cache.remove(data.root.code);
        time = (new Date().getDate()) + '.' + (new Date().getFullYear());
        views = DB.get('views', {});
        views[o.id] = {
          time: time,
          force: false
        };
        DB.set('views', views);
        o.update(cache);
        return _this.display();
      });
    } else {
      return o.update();
    }
  };

  Controller.prototype.display = function() {
    var o;
    o = this.currentView;
    Historic.save();
    $('#page').html('');
    if (o.content) {
      $('#page').html(o.content());
    }
    $('#title').text(__('title_' + o.name));
    $('#page').removeClass().addClass(o.name);
    return Fx.updateHeight();
  };

  Controller.prototype.refresh = function() {
    var args;
    Fx.toUpdate(this.currentView.id);
    args = this.currentView.id.split('.');
    return this.load.apply(this, args);
  };

  return Controller;

})();

View = (function() {

  function View() {}

  View.prototype.id = null;

  View.prototype.name = null;

  View.prototype.url = null;

  View.prototype.params = null;

  View.prototype.root = null;

  return View;

})();

View_ShowEpisodes = (function(_super) {
  var _ref;

  __extends(View_ShowEpisodes, _super);

  function View_ShowEpisodes() {
    this.init = __bind(this.init, this);
    return View_ShowEpisodes.__super__.constructor.apply(this, arguments);
  }

  View_ShowEpisodes.prototype.init = function(url) {
    this.id = 'ShowEpisodes.' + url;
    this.url = '/shows/episodes/' + url;
    this.episodes = DB.get('show.' + url + '.episodes');
    return this.show = url;
  };

  View_ShowEpisodes.prototype.name = 'ShowEpisodes';

  View_ShowEpisodes.prototype.params = '&summary=1&hide_notes=1';

  View_ShowEpisodes.prototype.root = 'seasons';

  View_ShowEpisodes.prototype.login = (_ref = DB.get('session')) != null ? _ref.login : void 0;

  View_ShowEpisodes.prototype.update = function(data) {
    var e, i, j, n, seasons, showEpisodes, shows, _ref1;
    shows = DB.get('member.' + this.login + '.shows', {});
    if (this.show in shows) {
      shows[this.show].archive = false;
    } else {
      shows[this.show] = {
        url: this.show,
        archive: false,
        hidden: false
      };
    }
    showEpisodes = DB.get('show.' + this.show + '.episodes', {});
    for (i in data) {
      seasons = data[i];
      _ref1 = seasons.episodes;
      for (j in _ref1) {
        e = _ref1[j];
        n = Fx.splitNumber(e.number);
        showEpisodes[e.global] = {
          comments: e.comments,
          date: e.date,
          downloaded: e.downloaded === '1',
          episode: n.episode,
          global: e.global,
          number: e.number,
          season: n.season,
          title: e.title,
          show: this.show,
          url: this.show
        };
        if (e.downloaded !== '-1') {
          showEpisodes[e.global].downloaded = e.downloaded === '1';
        }
      }
    }
    DB.set('show.' + this.show + '.episodes', showEpisodes);
    return DB.set('member.' + this.login + '.shows', shows);
  };

  View_ShowEpisodes.prototype.content = function() {
    var classHidden, data, e, episodes, hidden, i, lastSeason, nbrEpisodes, output, s, season, seasons, shows, start;
    data = DB.get('show.' + this.show + '.episodes', null);
    if (!data) {
      return Fx.needUpdate();
    }
    episodes = DB.get('member.' + this.login + '.episodes', null);
    if (!episodes) {
      return Fx.needUpdate();
    }
    shows = DB.get('member.' + this.login + '.shows', null);
    if (!shows) {
      return Fx.needUpdate();
    }
    s = shows[this.show];
    seasons = {};
    lastSeason = -1;
    nbrEpisodes = 0;
    for (i in data) {
      e = data[i];
      nbrEpisodes++;
      lastSeason = e.season;
      if (e.season in seasons) {
        seasons[e.season]++;
      } else {
        seasons[e.season] = 1;
      }
    }
    start = this.show in episodes ? episodes[this.show].start : nbrEpisodes;
    output = '<div id="' + this.show + '" class="show" start="' + start + '">';
    season = -1;
    for (i in data) {
      e = data[i];
      hidden = e.season !== lastSeason;
      classHidden = hidden ? ' hidden' : '';
      if (e.season !== season) {
        if (season !== -1) {
          output += '</div>';
        }
        output += '<div class="season' + classHidden + '" id="season' + e.season + '">';
        output += Content.season(e.season, seasons[e.season], hidden);
        season = e.season;
      }
      output += Content.episode(e, s.title, hidden, start);
    }
    output += '</div></div>';
    return output;
  };

  return View_ShowEpisodes;

})(View);

View_MemberPlanning = (function(_super) {

  __extends(View_MemberPlanning, _super);

  function View_MemberPlanning() {
    this.init = __bind(this.init, this);
    return View_MemberPlanning.__super__.constructor.apply(this, arguments);
  }

  View_MemberPlanning.prototype.init = function(login) {
    var _ref;
    if (login == null) {
      login = (_ref = DB.get('session')) != null ? _ref.login : void 0;
    }
    this.id = 'MemberPlanning.' + login;
    this.url = '/planning/member/' + login;
    return this.login = login;
  };

  View_MemberPlanning.prototype.name = 'MemberPlanning';

  View_MemberPlanning.prototype.params = "&view=unseen";

  View_MemberPlanning.prototype.root = 'planning';

  View_MemberPlanning.prototype.update = function(data) {
    return DB.set('member.' + this.login + '.planning', data);
  };

  View_MemberPlanning.prototype.content = function() {
    var actualWeek, data, diffWeek, e, hidden, nbrEpisodes, output, plot, titleIcon, today, todayWeek, visibleIcon, w, week;
    output = '';
    week = 100;
    nbrEpisodes = 0;
    data = DB.get('member.' + this.login + '.planning', null);
    if (!data) {
      return Fx.needUpdate();
    }
    for (e in data) {
      today = Math.floor(new Date().getTime() / 1000);
      todayWeek = parseFloat(date('W', today));
      actualWeek = parseFloat(date('W', data[e].date));
      diffWeek = actualWeek - todayWeek;
      plot = data[e].date < today ? "tick" : "empty";
      if (diffWeek < -2 || diffWeek > 2) {
        continue;
      }
      if (actualWeek !== week) {
        week = actualWeek;
        if (diffWeek < -1) {
          w = __('weeks_ago', [Math.abs(diffWeek)]);
          hidden = true;
        } else if (diffWeek === -1) {
          w = __('last_week');
          hidden = true;
        } else if (diffWeek === 0) {
          w = __('this_week');
          hidden = false;
        } else if (diffWeek === 1) {
          w = __('next_week');
        } else if (diffWeek > 1) {
          w = __('next_weeks', [diffWeek]);
          hidden = false;
        }
        if (nbrEpisodes > 0) {
          output += '</div>';
        }
        visibleIcon = hidden ? '../img/arrow_right.gif' : '../img/arrow_down.gif';
        titleIcon = hidden ? __('maximise') : __('minimise');
        hidden = hidden ? ' hidden' : '';
        output += '<div class="week' + hidden + '">';
        output += '<div class="title"> ';
        output += '<img src="' + visibleIcon + '" class="toggleWeek" title="' + titleIcon + '" />';
        output += w + '</div>';
      }
      output += '<div class="episode ' + date('D', data[e].date).toLowerCase() + hidden + '">';
      output += '<div class="td wrapper-seen">';
      output += '<img src="../img/' + plot + '.png" width="11" />';
      output += '</div>';
      output += '<div class="td wrapper-title" style="width: 186px;">';
      output += '<span class="num">' + Fx.displayNumber(data[e].number) + '</span> ';
      output += '<a href="" url="' + data[e].url + '" season="' + data[e].season + '" episode="' + data[e].episode + '" global="' + data[e].global + '" title="' + data[e].show + '" class="epLink display_episode">';
      output += data[e].show + '</a>';
      output += '</div>';
      output += '<div class="td wrapper-date">';
      output += '<span class="date">' + date('D d F', data[e].date) + '</span>';
      output += '</div>';
      output += '</div>';
      nbrEpisodes++;
    }
    return output;
  };

  return View_MemberPlanning;

})(View);

View_Member = (function(_super) {

  __extends(View_Member, _super);

  function View_Member() {
    this.init = __bind(this.init, this);
    return View_Member.__super__.constructor.apply(this, arguments);
  }

  View_Member.prototype.init = function(login) {
    var _ref;
    if (login == null) {
      login = (_ref = DB.get('session')) != null ? _ref.login : void 0;
    }
    this.id = 'Member.' + login;
    this.url = '/members/infos/' + login;
    return this.login = login;
  };

  View_Member.prototype.name = 'Member';

  View_Member.prototype.root = 'member';

  View_Member.prototype.update = function(data) {
    var member;
    member = DB.get('member.' + this.login + '.infos', {});
    member.login = data.login;
    member.is_in_account = data.is_in_account;
    member.avatar = data.avatar;
    member.stats = data.stats;
    return DB.set('member.' + this.login + '.infos', member);
  };

  View_Member.prototype.content = function() {
    var avatar, data, output;
    data = DB.get('member.' + this.login + '.infos', null);
    if (!data) {
      return Fx.needUpdate();
    }
    if ((data.avatar != null) && data.avatar !== '') {
      avatar = new Image;
      avatar.src = data.avatar;
      avatar.onload = function() {
        return $('#avatar').attr('src', data.avatar);
      };
    }
    output = '';
    output += '<div class="title">' + data.login + '</div>';
    output += '<img src="../img/avatar.png" width="50" id="avatar" style="position:absolute; right:0;" />';
    output += '<div class="episode lun"><img src="../img/infos.png" class="icon"> ' + __('nbr_friends', [data.stats.friends]) + ' </div>';
    output += '<div class="episode lun"><img src="../img/medal.png" class="icon"> ' + __('nbr_badges', [data.stats.badges]) + ' </div>';
    output += '<div class="episode lun"><img src="../img/episodes.png" class="icon"> ' + __('nbr_shows', [data.stats.shows]) + ' </div>';
    output += '<div class="episode lun"><img src="../img/report.png" class="icon"> ' + __('nbr_seasons', [data.stats.seasons]) + ' </div>';
    output += '<div class="episode lun"><img src="../img/script.png" class="icon"> ' + __('nbr_episodes', [data.stats.episodes]) + ' </div>';
    output += '<div class="episode lun"><img src="../img/location.png" class="icon">' + data.stats.progress + ' <small>(' + __('progress') + ')</small></div>';
    if (data.is_in_account != null) {
      output += '<div class="title2">' + __('actions') + '</div>';
      if (data.is_in_account) {
        output += '<a href="#' + data.login + '" id="friendsRemove" class="link">' + '<span class="imgSyncOff"></span>' + __('remove_to_friends', [data.login]) + '</a>';
      } else {
        output += '<a href="#' + data.login + '" id="friendsAdd" class="link">' + '<span class="imgSyncOff"></span>' + __('add_to_friends', [data.login]) + '</a>';
      }
    }
    return output;
  };

  return View_Member;

})(View);

View_MemberShows = (function(_super) {

  __extends(View_MemberShows, _super);

  function View_MemberShows() {
    this.init = __bind(this.init, this);
    return View_MemberShows.__super__.constructor.apply(this, arguments);
  }

  View_MemberShows.prototype.init = function(login) {
    var _ref;
    if (login == null) {
      login = (_ref = DB.get('session')) != null ? _ref.login : void 0;
    }
    this.id = 'MemberShows.' + login;
    this.url = '/members/infos/' + login;
    return this.login = login;
  };

  View_MemberShows.prototype.name = 'MemberShows';

  View_MemberShows.prototype.root = 'member';

  View_MemberShows.prototype.update = function(data) {
    var i, s, shows, _ref;
    shows = DB.get('member.' + this.login + '.shows', {});
    _ref = data.shows;
    for (i in _ref) {
      s = _ref[i];
      if (s.url in shows) {
        shows[s.url].archive = s.archive;
      } else {
        shows[s.url] = {
          url: s.url,
          title: s.title,
          archive: s.archive,
          hidden: false
        };
      }
    }
    return DB.set('member.' + this.login + '.shows', shows);
  };

  View_MemberShows.prototype.content = function() {
    var data, i, output, show;
    data = DB.get('member.' + this.login + '.shows', null);
    if (!data) {
      return Fx.needUpdate();
    }
    output = '';
    for (i in data) {
      show = data[i];
      output += '<div class="episode" id="' + show.url + '">';
      if (show.archive === '1') {
        output += '<img src="../img/folder_off.png" class="icon-3" /> ';
      } else {
        output += '<img src="../img/folder.png" class="icon-3" /> ';
      }
      output += '<a href="" url="' + show.url + '" class="epLink display_show">' + show.title + '</a>';
      output += '</div>';
    }
    return output;
  };

  return View_MemberShows;

})(View);

View_MemberNotifications = (function(_super) {
  var _ref;

  __extends(View_MemberNotifications, _super);

  function View_MemberNotifications() {
    return View_MemberNotifications.__super__.constructor.apply(this, arguments);
  }

  View_MemberNotifications.prototype.id = 'MemberNotifications';

  View_MemberNotifications.prototype.name = 'MemberNotifications';

  View_MemberNotifications.prototype.url = '/members/notifications';

  View_MemberNotifications.prototype.root = 'notifications';

  View_MemberNotifications.prototype.login = (_ref = DB.get('session')) != null ? _ref.login : void 0;

  View_MemberNotifications.prototype.update = function(data) {
    var n, new_notifs, old_notifs;
    old_notifs = DB.get('member.' + this.login + '.notifs', []);
    new_notifs = Fx.formatNotifications(data);
    n = Fx.concatNotifications(old_notifs, new_notifs);
    n = Fx.sortNotifications(n);
    return DB.set('member.' + this.login + '.notifs', n);
  };

  View_MemberNotifications.prototype.content = function() {
    var currDate, data, n, nbrNotifications, newDate, output, time, _i, _len;
    output = '';
    nbrNotifications = 0;
    currDate = '';
    data = DB.get('member.' + this.login + '.notifs', null);
    if (!data) {
      return Fx.needUpdate();
    }
    time = Math.floor(new Date().getTime() / 1000);
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      n = data[_i];
      if (time < n.date) {
        continue;
      }
      newDate = date('D d F', n.date);
      if (newDate !== currDate) {
        currDate = newDate;
        output += '<div class="showtitle">' + currDate + '</div>';
      }
      output += '<div class="event ' + date('D', n.date).toLowerCase() + '">';
      if (!n.seen) {
        output += '<span class="new">' + __('new') + '</span> ';
      }
      output += n.html;
      output += '</div>';
      n.seen = true;
      nbrNotifications++;
    }
    DB.set('member.' + this.login + '.notifs', data);
    $('.notif').html(0).hide();
    Badge.set('new_notifications', 0);
    if (nbrNotifications === 0) {
      output += __('no_notifications');
    }
    return output;
  };

  return View_MemberNotifications;

})(View);

View_MemberTimeline = (function(_super) {
  var _ref;

  __extends(View_MemberTimeline, _super);

  function View_MemberTimeline() {
    return View_MemberTimeline.__super__.constructor.apply(this, arguments);
  }

  View_MemberTimeline.prototype.id = 'MemberTimeline';

  View_MemberTimeline.prototype.name = 'MemberTimeline';

  View_MemberTimeline.prototype.url = '/timeline/friends';

  View_MemberTimeline.prototype.params = '&number=10';

  View_MemberTimeline.prototype.root = 'timeline';

  View_MemberTimeline.prototype.login = (_ref = DB.get('session')) != null ? _ref.login : void 0;

  View_MemberTimeline.prototype.update = function(data) {
    return DB.set('member.' + this.login + '.timeline', data);
  };

  View_MemberTimeline.prototype.content = function() {
    var data, n, new_date, output, time;
    output = '';
    time = '';
    data = DB.get('member.' + this.login + '.timeline', null);
    if (!data) {
      return Fx.needUpdate();
    }
    for (n in data) {
      new_date = date('D d F', data[n].date);
      if (new_date !== time) {
        time = new_date;
        output += '<div class="title">' + time + '</div>';
      }
      output += '<div class="event ' + date('D', data[n].date).toLowerCase() + '">';
      output += '<b>' + date('H:i', data[n].date) + '</b> ';
      output += '<span class="login">' + data[n].login + '</span> ' + data[n].html;
      output += '</div>';
    }
    return output;
  };

  return View_MemberTimeline;

})(View);

View_Connection = (function(_super) {

  __extends(View_Connection, _super);

  function View_Connection() {
    return View_Connection.__super__.constructor.apply(this, arguments);
  }

  View_Connection.prototype.id = 'Connection';

  View_Connection.prototype.name = 'Connection';

  View_Connection.prototype.content = function() {
    var output;
    menu.hide();
    output = '<div style="height:10px;"></div>';
    output += '<form id="connect">';
    output += '<table><tr><td>' + __('login') + '</td><td><input type="text" name="login" id="login" /></td></tr>';
    output += '<tr><td>' + __('password') + '</td><td><input type="password" name="password" id="password" /></td></tr>';
    output += '</table>';
    output += '<div class="valid"><input type="submit" value="' + __('sign_in') + '"> ou ';
    output += '	<a href="" class="display_registration">' + __('sign_up') + '</a></div>';
    output += '</form>';
    return output;
  };

  return View_Connection;

})(View);

View_Registration = (function(_super) {

  __extends(View_Registration, _super);

  function View_Registration() {
    return View_Registration.__super__.constructor.apply(this, arguments);
  }

  View_Registration.prototype.id = 'Registration';

  View_Registration.prototype.name = 'Registration';

  View_Registration.prototype.content = function() {
    var output;
    menu.hide();
    output = '<div style="height:10px;"></div>';
    output += '<form id="register">';
    output += '<table><tr><td>' + __('login') + '</td><td><input type="text" name="login" id="login" /></td></tr>';
    output += '<tr><td>' + __('password') + '</td><td><input type="password" name="password" id="password" /></td></tr>';
    output += '<tr><td>' + __('repassword') + '</td><td><input type="password" name="repassword" id="repassword" /></td></tr>';
    output += '<tr><td>' + __('email') + '</td><td><input type="text" name="mail" id="mail" /></td></tr>';
    output += '</table>';
    output += '<div class="valid"><input type="submit" value="' + __('sign_up') + '"> ou ';
    output += '	<a href="#" class="display_connection">' + __('sign_in') + '</a></div>';
    output += '</form>';
    return output;
  };

  return View_Registration;

})(View);

View_Search = (function(_super) {

  __extends(View_Search, _super);

  function View_Search() {
    return View_Search.__super__.constructor.apply(this, arguments);
  }

  View_Search.prototype.id = 'Search';

  View_Search.prototype.name = 'Search';

  View_Search.prototype.content = function() {
    var output;
    output = '<div style="height:10px;"></div>';
    output += '<form id="search">';
    output += '<input type="text" name="terms" id="terms" /> ';
    output += '<input type="submit" value="chercher" />';
    output += '</form>';
    output += '<div id="suggests_shows"></div>';
    output += '<div id="suggests_members"></div>';
    output += '<div id="results_shows"></div>';
    output += '<div id="results_members"></div>';
    setTimeout((function() {
      return $('#terms').focus();
    }), 100);
    return output;
  };

  return View_Search;

})(View);

View_Blog = (function(_super) {

  __extends(View_Blog, _super);

  function View_Blog() {
    return View_Blog.__super__.constructor.apply(this, arguments);
  }

  View_Blog.prototype.id = 'Blog';

  View_Blog.prototype.name = 'Blog';

  View_Blog.prototype.update = function() {
    return $.ajax({
      type: 'GET',
      url: 'https://www.betaseries.com/blog/feed/',
      dataType: 'xml',
      async: false,
      success: function(data) {
        var article, blog, i, item, items, _i, _ref;
        items = $(data).find('item');
        blog = [];
        for (i = _i = 0, _ref = Math.min(10, items.length); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          item = $(items[i]);
          article = {};
          article.title = item.find('title').text();
          article.description = item.find('description').text();
          article.link = item.find('link').text();
          blog.push(article);
        }
        DB.set('blog', blog);
        return BS.display();
      }
    });
  };

  View_Blog.prototype.content = function() {
    var article, data, i, link, output, title, _i, _len;
    output = '';
    data = DB.get('blog', null);
    if (!data) {
      return Fx.needUpdate();
    }
    for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
      article = data[i];
      title = article.title.substring(0, 40);
      if (article.title.length > 40) {
        title += '..';
      }
      output += '<div class="showtitle">' + title;
      output += '</div>';
      link = '<a href="#" link="' + article.link + '" class="display_postblog">(' + __('read_article') + ')</a>';
      output += '<div>' + article.description.replace(/<a(.*)a>/, link) + '</div>';
      output += '<div style="height:11px;"></div>';
    }
    return output;
  };

  return View_Blog;

})(View);
