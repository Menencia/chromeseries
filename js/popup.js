// Generated by CoffeeScript 1.3.3
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

$(document).ready(function() {
  var highlight, message, registerAction;
  $('*[title], *[smart-title]').live({
    mouseenter: function() {
      var title;
      title = $(this).attr('title');
      if (title != null) {
        $(this).removeAttr('title');
        $(this).attr('smart-title', title);
      } else {
        title = $(this).attr('smart-title');
      }
      $('#help').show();
      return $('#help-text').html(title);
    },
    mouseleave: function() {
      $('#help').hide();
      return $('#help-text').html('');
    },
    click: function() {
      $('#help').hide();
      return $('#help-text').html('');
    }
  });
  $('.ShowEpisodes .watched').live({
    click: function() {
      var e, episode, es, login, newStart, params, s, season, show, start, _ref;
      s = $(this).closest('.show');
      show = s.attr('id');
      start = parseInt(s.attr('start'));
      e = $(this).closest('.episode');
      newStart = parseInt(e.attr('global')) + 1;
      s.attr('start', newStart);
      season = e.attr('season');
      episode = e.attr('episode');
      login = DB.get('session').login;
      es = DB.get('member.' + login + '.episodes');
      if ((_ref = !show, __indexOf.call(es, _ref) >= 0)) {
        es[show] = {};
      }
      es[show].start = "" + newStart;
      es[show].nbr_total += start - newStart;
      if (es[show].nbr_total === 0) {
        delete es[show];
      }
      $('.show').find('.episode').each(function(i) {
        if ($(this).attr('global') <= newStart - 1) {
          return $(this).find('.watched').attr('src', '../img/tick.png').css('opacity', 0.5);
        } else {
          return $(this).find('.watched').attr('src', '../img/empty.png');
        }
      });
      params = "&season=" + season + "&episode=" + episode;
      return ajax.post("/members/watched/" + show, params, function() {
        var badge_notification_type;
        DB.set('member.' + login + '.episodes', es);
        Cache.force('MemberTimeline');
        badge_notification_type = DB.get('options').badge_notification_type;
        if (badge_notification_type === 'watched') {
          return Badge.searchEpisodes();
        }
      }, function() {
        return registerAction("/members/watched/" + show, params);
      });
    },
    mouseenter: function() {
      var e;
      e = $(this).closest('.episode');
      return e.find('.watched').attr('src', '../img/arrow_right.png').css('opacity', 1);
    },
    mouseleave: function() {
      var e, start;
      start = parseInt($(this).closest('.show').attr('start'));
      e = $(this).closest('.episode');
      if (e.attr('global') < start) {
        return e.find('.watched').attr('src', '../img/tick.png').css('opacity', 0.5);
      } else {
        return e.find('.watched').attr('src', '../img/empty.png');
      }
    }
  });
  $('#page').on('click', '.display_episodes', function() {
    var url;
    event.preventDefault();
    url = $(this).attr('url');
    return BS.load('ShowEpisodes', url);
  });
  $('#page').on('click', '.display_member', function() {
    var login;
    event.preventDefault();
    login = $(this).attr('login');
    return BS.load('Member', login);
  });
  $('#page').on('click', '.display_registration', function() {
    event.preventDefault();
    return BS.load('Registration');
  });
  $('#page').on('click', '.display_connection', function() {
    event.preventDefault();
    return BS.load('Connection');
  });
  $('#page').on('click', '.display_postblog', function() {
    var link;
    event.preventDefault();
    link = $(this).attr('link');
    return Fx.openTab(link, true);
  });
  $('.ShowEpisodes .downloaded').live('click', function() {
    var dl, downloaded, episode, es, global, params, season, show,
      _this = this;
    event.preventDefault();
    show = $(this).attr('show');
    season = $(this).attr('season');
    episode = $(this).attr('episode');
    global = $(this).attr('global');
    es = DB.get('show.' + show + '.episodes');
    downloaded = es[global].downloaded;
    es[global].downloaded = !downloaded;
    DB.set('show.' + show + '.episodes', es);
    $(this).find('span').toggleClass('imgSyncOff imgSyncOn');
    dl = downloaded ? 'mark_as_dl' : 'mark_as_not_dl';
    params = "&season=" + season + "&episode=" + episode;
    return ajax.post("/members/downloaded/" + show, params, function() {
      var badge_notification_type;
      Cache.force('MyEpisodes.all');
      badge_notification_type = DB.get('options').badge_notification_type;
      if (badge_notification_type === 'downloaded') {
        Badge.searchEpisodes();
      }
      return $(_this).html('<span class="imgSyncOff"></span>' + __(dl));
    }, function() {
      return registerAction("/members/downloaded/" + show, params);
    });
  });
  $('#showsArchive').live({
    click: function() {
      var show,
        _this = this;
      show = $(this).attr('href').substring(1);
      $(this).find('span').toggleClass('imgSyncOff imgSyncOn');
      ajax.post("/shows/archive/" + show, "", function() {
        Cache.force('MyEpisodes.all');
        Cache.force('Member.' + DB.get('session').login);
        Badge.searchEpisodes();
        $(_this).html('<span class="imgSyncOff"></span>' + __('show_unarchive'));
        return $(_this).attr('id', 'showsUnarchive');
      }, function() {
        return registerAction("/shows/archive/" + show, "");
      });
      return false;
    }
  });
  $('#showsUnarchive').live({
    click: function() {
      var show,
        _this = this;
      show = $(this).attr('href').substring(1);
      $(this).find('span').toggleClass('imgSyncOff imgSyncOn');
      ajax.post("/shows/unarchive/" + show, "", function() {
        Cache.force('MyEpisodes.all');
        Cache.force('Member.' + DB.get('session').login);
        Badge.searchEpisodes();
        $(_this).html('<span class="imgSyncOff"></span>' + __('show_archive'));
        return $(_this).attr('id', 'showsArchive');
      }, function() {
        return registerAction("/shows/unarchive/" + show, "");
      });
      return false;
    }
  });
  $('#showsAdd').live({
    click: function() {
      var show,
        _this = this;
      show = $(this).attr('href').substring(1);
      $(this).find('span').toggleClass('imgSyncOff imgSyncOn');
      ajax.post('/shows/add/' + show, '', function() {
        Cache.force('MyEpisodes.all');
        Cache.force('Member.' + DB.get('session').login);
        Badge.searchEpisodes();
        $(_this).html('<span class="imgSyncOff"></span>' + __('show_remove'));
        return $(_this).attr('id', 'showsRemove');
      }, function() {
        return registerAction("/shows/add/" + show, '');
      });
      return false;
    }
  });
  $('#showsRemove').live({
    click: function() {
      var show,
        _this = this;
      show = $(this).attr('href').substring(1);
      $(this).find('span').toggleClass('imgSyncOff imgSyncOn');
      $('#showsArchive').slideUp();
      $('#showsUnarchive').slideUp();
      ajax.post('/shows/remove/' + show, '', function() {
        Cache.force('MyEpisodes.all');
        Cache.force('Member.' + DB.get('session').login);
        Badge.searchEpisodes();
        $(_this).html('<span class="imgSyncOff"></span>' + __('show_add'));
        return $(_this).attr('id', 'showsAdd');
      }, function() {
        return registerAction("/shows/remove/" + show, '');
      });
      return false;
    }
  });
  $('#friendsAdd').live({
    click: function() {
      var login,
        _this = this;
      login = $(this).attr('href').substring(1);
      $(this).find('span').toggleClass('imgSyncOff imgSyncOn');
      ajax.post("/members/add/" + login, '', function() {
        Cache.force('MyEpisodes.' + DB.get('session').login);
        Cache.force('Member.' + login);
        Cache.force('MemberTimeline');
        $(_this).html('<span class="imgSyncOff"></span>' + __('remove_to_friends', [login]));
        return $(_this).attr('id', 'friendsRemove');
      }, function() {
        return registerAction("/members/add/" + login, '');
      });
      return false;
    }
  });
  $('#friendsRemove').live({
    click: function() {
      var login,
        _this = this;
      login = $(this).attr('href').substring(1);
      $(this).find('span').toggleClass('imgSyncOff imgSyncOn');
      ajax.post("/members/delete/" + login, '', function() {
        Cache.force('Member.' + DB.get('session').login);
        Cache.force('Member.' + login);
        Cache.force('MemberTimeline');
        $(_this).html('<span class="imgSyncOff"></span>' + __('add_to_friends', [login]));
        return $(_this).attr('id', 'friendsAdd');
      });
      return false;
    }
  });
  $('#connect').live({
    submit: function() {
      var inputs, login, params, password;
      login = $('#login').val();
      password = md5($('#password').val());
      inputs = $(this).find('input').attr({
        disabled: 'disabled'
      });
      params = "&login=" + login + "&password=" + password;
      ajax.post("/members/auth", params, function(data) {
        var token;
        if (data.root.member != null) {
          $('#message').slideUp();
          $('#connect').remove();
          token = data.root.member.token;
          DB.set('session', {
            login: login,
            token: data.root.member.token
          });
          menu.show();
          $('#back').hide();
          return BS.load('MyEpisodes');
        } else {
          $('#password').attr('value', '');
          message('<img src="../img/inaccurate.png" /> ' + __('wrong_login_or_password'));
          return inputs.removeAttr('disabled');
        }
      }, function() {
        $('#password').attr('value', '');
        return inputs.removeAttr('disabled');
      });
      return false;
    }
  });
  $('#register').live({
    submit: function() {
      var inputs, login, mail, params, pass, password, repassword;
      login = $('#login').val();
      password = $('#password').val();
      repassword = $('#repassword').val();
      mail = $('#mail').val();
      inputs = $(this).find('input').attr({
        disabled: 'disabled'
      });
      params = "&login=" + login + "&password=" + password + "&mail=" + mail;
      pass = true;
      if (password !== repassword) {
        pass = false;
        message('<img src="../img/inaccurate.png" /> ' + __("password_not_matching"));
      }
      if (login.length > 24) {
        pass = false;
        message('<img src="../img/inaccurate.png" /> ' + __("long_login"));
      }
      if (pass) {
        ajax.post("/members/signup", params, function(data) {
          var err;
          if (data.root.errors.error) {
            err = data.root.errors.error;
            message('<img src="../img/inaccurate.png" /> ' + __('err' + err.code));
            $('#password').attr('value', '');
            $('#repassword').attr('value', '');
            return inputs.removeAttr('disabled');
          } else {
            BS.load('Connection');
            $('#login').val(login);
            $('#password').val(password);
            return $('#connect').trigger('submit');
          }
        }, function() {
          $('#password').attr('value', '');
          $('#repassword').attr('value', '');
          return inputs.removeAttr('disabled');
        });
      } else {
        $('#password').attr('value', '');
        $('#repassword').attr('value', '');
        inputs.removeAttr('disabled');
      }
      return false;
    }
  });
  $('#search').live({
    submit: function() {
      var params, terms;
      terms = $('#terms').val();
      params = "&title=" + terms;
      ajax.post("/shows/search", params, function(data) {
        var content, n, show, shows;
        content = '<div class="title">' + __('shows') + '</div>';
        shows = data.root.shows;
        if (Object.keys(shows).length > 0) {
          for (n in shows) {
            show = shows[n];
            content += '<div class="episode"><a href="" url="' + show.url + '" title="' + show.title + '" class="epLink display_show">' + Fx.subFirst(show.title, 25) + '</a></div>';
          }
        } else {
          content += '<div class="episode">' + __('no_shows_found') + '</div>';
        }
        $('#results_shows').html(content);
        return Fx.updateHeight();
      }, function() {});
      params = "&login=" + terms;
      ajax.post("/members/search", params, function(data) {
        var content, member, members, n;
        content = '<div class="title">' + __('members') + '</div>';
        members = data.root.members;
        if (Object.keys(members).length > 0) {
          for (n in members) {
            member = members[n];
            content += '<div class="episode"><a href="#" login="' + member.login + '" class="epLink display_member">' + Fx.subFirst(member.login, 25) + '</a></div>';
          }
        } else {
          content += '<div class="episode">' + __('no_members_found') + '</div>';
        }
        $('#results_members').html(content);
        return Fx.updateHeight();
      }, function() {});
      return false;
    }
  });
  registerAction = function(category, params) {
    return console.log("action: " + category + params);
  };
  $('.toggleSeason').live({
    click: function() {
      var hidden, season;
      season = $(this).closest('.season');
      hidden = $(season).hasClass('hidden');
      $(season).toggleClass('hidden');
      $(season).find('.episode').slideToggle();
      if (hidden) {
        $(this).attr('src', '../img/arrow_down.gif');
      } else {
        $(this).attr('src', '../img/arrow_right.gif');
      }
      return Fx.updateHeight();
    }
  });
  $('.toggleWeek').live({
    click: function() {
      var hidden, week;
      week = $(this).closest('.week');
      hidden = $(week).hasClass('hidden');
      $(week).toggleClass('hidden');
      $(week).find('.episode').slideToggle();
      if (hidden) {
        $(this).attr('src', '../img/arrow_down.gif');
      } else {
        $(this).attr('src', '../img/arrow_right.gif');
      }
      return Fx.updateHeight();
    }
  });
  message = function(content) {
    $('#message .content').html(content);
    $('#message').slideDown();
    return highlight($('#message'));
  };
  highlight = function(selector) {
    var bgColor;
    bgColor = selector.css('background-color');
    selector.animate({
      backgroundColor: '#FAFA97'
    }, 500);
    return selector.animate({
      backgroundColor: bgColor
    }, 500);
  };
  window.app = new App();
  return app.init();
});
