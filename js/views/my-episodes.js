// Generated by CoffeeScript 1.7.1

/**
 * myEpisodes data
 */
var myEpisodes,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

myEpisodes = (function(_super) {
  __extends(myEpisodes, _super);

  function myEpisodes(db, params, callback) {
    myEpisodes.__super__.constructor.call(this, db, params, callback);
    this.path = '/episodes/list';
    this.store = '/episodes/list';
    this.node = 'shows';
  }


  /**
   * Update data
   * @param  {Object} data
   */

  myEpisodes.prototype.update = function(data) {
    var e, episode, episodeData, episodes, login, s, show, showData, shows, unseen;
    login = this.db.get('session').login;
    shows = this.db.get("member." + login + ".shows", []);
    unseen = 0;
    for (s in data) {
      showData = data[s];
      show = _.findWhere(shows, {
        "id": showData.id
      });
      if (show) {
        show.archived = false;
      } else {
        show = _.pick(showData, ['id', 'thetvdb_id', 'title', 'remaining']);
        show = _.extend(show, {
          "archived": false,
          "hidden": false
        });
        shows.push(show);
      }
      episodes = this.db.get("show." + showData.id + ".episodes", []);
      for (e in showData.unseen) {
        episodeData = showData.unseen[e];
        episode = _.findWhere(episodes, {
          "id": episodeData.id
        });
        if (episode) {
          episode = _.extend(episode, episodeData);
        } else {
          episode = episodeData;
          episodes.push(episode);
        }
        unseen++;
      }
      this.db.set("show." + showData.id + ".episodes", episodes);
    }
    return this.db.set("member." + login + ".shows", shows);
  };


  /**
   * Prepare data
   */

  myEpisodes.prototype.fetch = function() {
    var episodes, i, login, show, shows, showsData, _ref;
    login = this.db.get('session').login;
    showsData = this.db.get("member." + login + ".shows", []);
    shows = _.filter(showsData, function(show) {
      return show.remaining > 0 && !show.archived;
    });
    for (i in shows) {
      show = shows[i];
      show.visibleIcon = (_ref = show.hidden) != null ? _ref : {
        'img/arrow_right.gif': 'img/arrow_down.gif'
      };
      episodes = this.db.get("show." + show.id + ".episodes", []);
      show.episodes = _.last(episodes, show.remaining);
    }
    return this.callback(shows);
  };

  return myEpisodes;

})(View);
