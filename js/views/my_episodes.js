// Generated by CoffeeScript 1.3.3
var View_MyEpisodes,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

View_MyEpisodes = (function() {

  function View_MyEpisodes() {
    this.init = __bind(this.init, this);

  }

  View_MyEpisodes.prototype.init = function(lang) {
    var _ref;
    if (lang == null) {
      lang = 'all';
    }
    this.id = 'MyEpisodes.' + lang;
    this.url = '/members/episodes/' + lang;
    this.name = 'MyEpisodes';
    this.root = 'episodes';
    return this.login = (_ref = DB.get('session')) != null ? _ref.login : void 0;
  };

  View_MyEpisodes.prototype.update = function(data) {
    var d, e, j, memberEpisodes, showEpisodes, shows, time, today;
    shows = DB.get('member.' + this.login + '.shows', {});
    memberEpisodes = {};
    time = Math.floor(new Date().getTime() / 1000);
    j = 0;
    for (d in data) {
      e = data[d];
      if (e.url in shows) {
        shows[e.url].archive = false;
      } else {
        shows[e.url] = {
          url: e.url,
          title: e.show,
          archive: false,
          hidden: false
        };
      }
      showEpisodes = DB.get('show.' + e.url + '.episodes', {});
      showEpisodes[e.global] = {
        comments: e.comments,
        date: e.date,
        episode: e.episode,
        global: e.global,
        number: e.number,
        season: e.season,
        title: e.title,
        show: e.show,
        url: e.url,
        subs: e.subs,
        note: e.note.mean
      };
      if (e.downloaded !== '-1') {
        showEpisodes[e.global].downloaded = e.downloaded === '1';
      }
      DB.set('show.' + e.url + '.episodes', showEpisodes);
      if (e.url in memberEpisodes) {
        today = Math.floor(new Date().getTime() / 1000);
        if (e.date <= today) {
          memberEpisodes[e.url].nbr_total++;
        }
      } else {
        memberEpisodes[e.url] = {
          start: e.global,
          nbr_total: 1
        };
      }
      j++;
    }
    DB.set('member.' + this.login + '.shows', shows);
    DB.set('member.' + this.login + '.episodes', memberEpisodes);
    return Badge.set('total_episodes', j);
  };

  View_MyEpisodes.prototype.content = function() {
    var data, e, global, i, j, nbr, nbr_episodes_per_serie, output, s, showEpisodes, shows, today;
    data = DB.get('member.' + this.login + '.episodes', null);
    if (!data) {
      return Fx.needUpdate();
    }
    shows = DB.get('member.' + this.login + '.shows', null);
    if (!shows) {
      return Fx.needUpdate();
    }
    if (Fx.logged()) {
      if (DB.get('options').display_notifications_icon) {
        nbr = Fx.checkNotifications();
        if (nbr > 0) {
          $('.notif').html(nbr).show();
        }
      } else {
        $('#notifications').hide();
      }
    }
    Badge.set('new_episodes', 0);
    DB.set('new_episodes_checked', date('Y.m.d'));
    output = '<div id="shows">';
    for (i in data) {
      j = data[i];
      s = shows[i];
      output += '<div id="' + i + '" class="show">';
      output += Content.show(s, j.nbr_total);
      nbr_episodes_per_serie = DB.get('options').nbr_episodes_per_serie;
      showEpisodes = DB.get('show.' + i + '.episodes');
      global = j.start;
      while (global in showEpisodes && global - j.start < nbr_episodes_per_serie) {
        e = showEpisodes[global];
        today = Math.floor(new Date().getTime() / 1000);
        global++;
        if (e.date <= today) {
          output += Content.episode(e, s.title, s.hidden);
        }
      }
      output += '</div>';
    }
    /*
    		output += '<div id="noEpisodes">'
    		output += __('no_episodes_to_see') 
    		output += '<br /><br /><a href="#" onclick="BS.load(\'searchForm\').display(); return false;">'
    		output += '<img src="../img/film_add.png" class="icon2" />' + __('add_a_show') + '</a>'
    		output += '</div>'
    */

    output += '</div>';
    return output;
  };

  return View_MyEpisodes;

})();
