// Generated by CoffeeScript 1.3.3
var View_ShowEpisodes,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

View_ShowEpisodes = (function() {

  function View_ShowEpisodes() {
    this.init = __bind(this.init, this);

  }

  View_ShowEpisodes.prototype.init = function(url) {
    var _ref;
    this.id = 'ShowEpisodes.' + url;
    this.url = '/shows/episodes/' + url;
    this.episodes = DB.get('show.' + url + '.episodes');
    this.show = url;
    this.name = 'ShowEpisodes';
    this.params = '&summary=1&hide_notes=1';
    this.root = 'seasons';
    return this.login = (_ref = DB.get('session')) != null ? _ref.login : void 0;
  };

  View_ShowEpisodes.prototype.update = function(data) {
    var e, i, j, n, seasons, showEpisodes, shows, _ref;
    shows = DB.get('member.' + this.login + '.shows', {});
    if (this.show in shows) {
      shows[this.show].archive = false;
    } else {
      shows[this.show] = {
        url: this.show,
        archive: false,
        hidden: false
      };
    }
    showEpisodes = DB.get('show.' + this.show + '.episodes', {});
    for (i in data) {
      seasons = data[i];
      _ref = seasons.episodes;
      for (j in _ref) {
        e = _ref[j];
        n = Fx.splitNumber(e.number);
        showEpisodes[e.global] = {
          comments: e.comments,
          date: e.date,
          downloaded: e.downloaded === '1',
          episode: n.episode,
          global: e.global,
          number: e.number,
          season: n.season,
          title: e.title,
          show: this.show,
          url: this.show
        };
        if (e.downloaded !== '-1') {
          showEpisodes[e.global].downloaded = e.downloaded === '1';
        }
      }
    }
    DB.set('show.' + this.show + '.episodes', showEpisodes);
    return DB.set('member.' + this.login + '.shows', shows);
  };

  View_ShowEpisodes.prototype.content = function() {
    var classHidden, data, e, episodes, hidden, i, lastSeason, nbrEpisodes, output, s, season, seasons, shows, start;
    data = DB.get('show.' + this.show + '.episodes', null);
    if (!data) {
      return Fx.needUpdate();
    }
    episodes = DB.get('member.' + this.login + '.episodes', null);
    if (!episodes) {
      return Fx.needUpdate();
    }
    shows = DB.get('member.' + this.login + '.shows', null);
    if (!shows) {
      return Fx.needUpdate();
    }
    s = shows[this.show];
    seasons = {};
    lastSeason = -1;
    nbrEpisodes = 0;
    for (i in data) {
      e = data[i];
      nbrEpisodes++;
      lastSeason = e.season;
      if (e.season in seasons) {
        seasons[e.season]++;
      } else {
        seasons[e.season] = 1;
      }
    }
    start = this.show in episodes ? episodes[this.show].start : nbrEpisodes;
    output = '<div id="' + this.show + '" class="show" start="' + start + '">';
    season = -1;
    for (i in data) {
      e = data[i];
      hidden = e.season !== lastSeason;
      classHidden = hidden ? ' hidden' : '';
      if (e.season !== season) {
        if (season !== -1) {
          output += '</div>';
        }
        output += '<div class="season' + classHidden + '" id="season' + e.season + '">';
        output += Content.season(e.season, seasons[e.season], hidden);
        season = e.season;
      }
      output += Content.episode(e, s.title, hidden, start);
    }
    output += '</div></div>';
    return output;
  };

  return View_ShowEpisodes;

})();
