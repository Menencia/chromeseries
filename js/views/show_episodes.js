// Generated by CoffeeScript 1.3.3
var View_ShowEpisodes,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

View_ShowEpisodes = (function() {

  function View_ShowEpisodes() {
    this.init = __bind(this.init, this);

  }

  View_ShowEpisodes.prototype.init = function(url) {
    var _ref;
    this.id = 'ShowEpisodes.' + url;
    this.url = '/shows/episodes/' + url;
    this.episodes = DB.get('show.' + url + '.episodes');
    this.show = url;
    this.name = 'ShowEpisodes';
    this.params = '&summary=1&hide_notes=1';
    this.root = 'seasons';
    return this.login = (_ref = DB.get('session')) != null ? _ref.login : void 0;
  };

  View_ShowEpisodes.prototype.update = function(data) {
    var e, i, j, n, seasons, showEpisodes, shows, _ref;
    shows = DB.get('member.' + this.login + '.shows', {});
    if (this.show in shows) {
      shows[this.show].archive = false;
    } else {
      shows[this.show] = {
        url: this.show,
        archive: false,
        hidden: false
      };
    }
    showEpisodes = DB.get('show.' + this.show + '.episodes', {});
    for (i in data) {
      seasons = data[i];
      _ref = seasons.episodes;
      for (j in _ref) {
        e = _ref[j];
        n = Fx.splitNumber(e.number);
        showEpisodes[e.global] = {
          comments: e.comments,
          date: e.date,
          downloaded: e.downloaded === '1',
          episode: n.episode,
          global: e.global,
          number: e.number,
          season: n.season,
          title: e.title,
          show: this.show,
          url: this.show
        };
        if (e.downloaded !== '-1') {
          showEpisodes[e.global].downloaded = e.downloaded === '1';
        }
      }
    }
    DB.set('show.' + this.show + '.episodes', showEpisodes);
    return DB.set('member.' + this.login + '.shows', shows);
  };

  View_ShowEpisodes.prototype.content = function() {
    var classHidden, data, e, episodes, hidden, i, lastSeason, nbrEpisodes, output, s, season, seasons, shows, start;
    data = DB.get('show.' + this.show + '.episodes', null);
    if (!data) {
      return Fx.needUpdate();
    }
    episodes = DB.get('member.' + this.login + '.episodes', null);
    if (!episodes) {
      return Fx.needUpdate();
    }
    shows = DB.get('member.' + this.login + '.shows', null);
    if (!shows) {
      return Fx.needUpdate();
    }
    s = shows[this.show];
    seasons = {};
    lastSeason = -1;
    nbrEpisodes = 0;
    for (i in data) {
      e = data[i];
      nbrEpisodes++;
      lastSeason = e.season;
      if (e.season in seasons) {
        seasons[e.season]++;
      } else {
        seasons[e.season] = 1;
      }
    }
    start = this.show in episodes ? episodes[this.show].start : nbrEpisodes;
    output = '<div id="' + this.show + '" class="show" start="' + start + '">';
    season = -1;
    for (i in data) {
      e = data[i];
      hidden = e.season !== lastSeason;
      classHidden = hidden ? ' hidden' : '';
      if (e.season !== season) {
        if (season !== -1) {
          output += '</div>';
        }
        output += '<div class="season' + classHidden + '" id="season' + e.season + '">';
        output += Content.season(e.season, seasons[e.season], hidden);
        season = e.season;
      }
      output += Content.episode(e, s.title, hidden, start);
    }
    output += '</div></div>';
    return output;
  };

  View_ShowEpisodes.prototype.listen = function() {
    $('.watched').on({
      click: function() {
        var e, episode, es, login, newStart, params, s, season, show, start, _ref;
        s = $(this).closest('.show');
        show = s.attr('id');
        start = parseInt(s.attr('start'));
        e = $(this).closest('.episode');
        newStart = parseInt(e.attr('global')) + 1;
        s.attr('start', newStart);
        season = e.attr('season');
        episode = e.attr('episode');
        login = DB.get('session').login;
        es = DB.get('member.' + login + '.episodes');
        if ((_ref = !show, __indexOf.call(es, _ref) >= 0)) {
          es[show] = {};
        }
        es[show].start = "" + newStart;
        es[show].nbr_total += start - newStart;
        if (es[show].nbr_total === 0) {
          delete es[show];
        }
        $('.show').find('.episode').each(function(i) {
          if ($(this).attr('global') <= newStart - 1) {
            return $(this).find('.watched').attr('src', '../img/tick.png').css('opacity', 0.5);
          } else {
            return $(this).find('.watched').attr('src', '../img/empty.png');
          }
        });
        params = "&season=" + season + "&episode=" + episode;
        return ajax.post("/members/watched/" + show, params, function() {
          var badge_notification_type;
          DB.set('member.' + login + '.episodes', es);
          Cache.force('MemberTimeline');
          badge_notification_type = DB.get('options').badge_notification_type;
          if (badge_notification_type === 'watched') {
            return Badge.searchEpisodes();
          }
        }, function() {
          return registerAction("/members/watched/" + show, params);
        });
      },
      mouseenter: function() {
        var e;
        e = $(this).closest('.episode');
        return e.find('.watched').attr('src', '../img/arrow_right.png').css('opacity', 1);
      },
      mouseleave: function() {
        var e, start;
        start = parseInt($(this).closest('.show').attr('start'));
        e = $(this).closest('.episode');
        if (e.attr('global') < start) {
          return e.find('.watched').attr('src', '../img/tick.png').css('opacity', 0.5);
        } else {
          return e.find('.watched').attr('src', '../img/empty.png');
        }
      }
    });
    $('.downloaded').on('click', function() {
      var dl, downloaded, episode, es, global, params, season, show,
        _this = this;
      event.preventDefault();
      show = $(this).attr('show');
      season = $(this).attr('season');
      episode = $(this).attr('episode');
      global = $(this).attr('global');
      es = DB.get('show.' + show + '.episodes');
      downloaded = es[global].downloaded;
      es[global].downloaded = !downloaded;
      DB.set('show.' + show + '.episodes', es);
      $(this).find('span').toggleClass('imgSyncOff imgSyncOn');
      dl = downloaded ? 'mark_as_dl' : 'mark_as_not_dl';
      params = "&season=" + season + "&episode=" + episode;
      return ajax.post("/members/downloaded/" + show, params, function() {
        var badge_notification_type;
        Cache.force('MyEpisodes.all');
        badge_notification_type = DB.get('options').badge_notification_type;
        if (badge_notification_type === 'downloaded') {
          Badge.searchEpisodes();
        }
        return $(_this).html('<span class="imgSyncOff"></span>' + __(dl));
      }, function() {
        return registerAction("/members/downloaded/" + show, params);
      });
    });
    return $('.toggleSeason').on('click', function() {
      var hidden, season;
      season = $(this).closest('.season');
      hidden = $(season).hasClass('hidden');
      $(season).toggleClass('hidden');
      $(season).find('.episode').slideToggle();
      if (hidden) {
        $(this).attr('src', '../img/arrow_down.gif');
      } else {
        $(this).attr('src', '../img/arrow_right.gif');
      }
      return Fx.updateHeight();
    });
  };

  return View_ShowEpisodes;

})();
