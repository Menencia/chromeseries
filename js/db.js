// Generated by CoffeeScript 1.7.1

/**
 * DB
 */
var db, store;

db = (function() {
  function db() {}


  /**
   * Create/Get a store from localStorage
   * @param  {String} name
   * @return {store}
   */

  db.prototype.store = function(name) {
    return new store(this, name);
  };


  /**
   * Get a value from localStorage
   * @param  {String} field 
   * @param  {mixte} value 
   * @return {mixte}
   */

  db.prototype.get = function(field, value) {
    var item;
    item = localStorage.getItem(field);
    if (item) {
      return JSON.parse(item);
    } else {
      return value;
    }
  };


  /**
   * Set a value into localStorage
   * @param {String} field 
   * @param {mixte} value
   */

  db.prototype.set = function(field, value) {
    value = JSON.stringify(value);
    return localStorage.setItem(field, value);
  };


  /**
   * Remove a value from localStorage
   * @param  {String} field
   */

  db.prototype.remove = function(field) {
    return localStorage.removeItem(field);
  };

  return db;

})();


/**
* STORE
 */

store = (function() {

  /**
   * Constructor
   * @param  {db} @db  
   * @param  {String} name
   */
  function store(db, name) {
    this.db = db;
    this._name = name;
    this._data = this.db.get(name, []);
  }


  /**
   * Get data from a store
   * @param  {mixte} filter 
   * @return {mixte}
   */

  store.prototype.get = function(filter) {
    if (typeof filter === "number") {
      return this._data[filter];
    } else {
      return this._data;
    }
  };


  /**
   * Set data store (with timestamp)
   * @param {String} value
   */

  store.prototype.set = function(value) {
    var d;
    d = new Date();
    this.db.set(this._name, value);
    return this.db.set(this._name + "-timestamp", d.toDateString());
  };


  /**
   * Returns if data is not oudated
   * @return {Boolean}
   */

  store.prototype.isReliable = function() {
    var d;
    d = new Date();
    return this.db.get(this._name + '-timestamp') === d.toDateString();
  };


  /**
   * Update one/many items from a store
   * @param  {Array} items
   */

  store.prototype.update = function(items) {
    var i, j, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      i = items[_i];
      _results.push((function() {
        var _j, _len1, _ref, _results1;
        _ref = items[i];
        _results1 = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          j = _ref[_j];
          this._data[i][j] = items[i][j];
          _results1.push(this.__save());
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };


  /**
   * Remove an item from a store
   * Remove a store
   * @param  {mixte} filter
   */

  store.prototype.remove = function(filter) {
    if (typeof filter === "number") {
      delete this._data[filter];
      return this.__save();
    } else {
      return this.db.remove(this._name);
    }
  };


  /**
   * Save a store to localStorage
   */

  store.prototype.__save = function() {
    return this.db.set(this._name, this._data);
  };

  return store;

})();
