// Generated by CoffeeScript 1.3.3
var View,
  __slice = [].slice;

View = (function() {

  function View(app) {
    this.app = app;
  }

  View.prototype.load = function() {
    var force, o, outdated, params, sameView, time, view, views;
    view = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    o = new window['View_' + view];
    if (o.init != null) {
      o.init.apply(this, params);
    }
    sameView = (this.app.view != null) && o.id === this.app.view.id;
    this.app.view = o;
    if (!sameView) {
      this.display();
    }
    if (o.update != null) {
      $('#sync').show();
      time = (new Date().getDate()) + '.' + (new Date().getFullYear());
      views = DB.get('views', {});
      outdated = views[o.id] != null ? views[o.id].time !== time : true;
      force = views[o.id] != null ? views[o.id].force : true;
      if (outdated || force) {
        return this.update();
      }
    } else {
      return $('#sync').hide();
    }
  };

  View.prototype.update = function() {
    var o, params,
      _this = this;
    o = this.app.view;
    params = o.params || '';
    if (o.url != null) {
      return ajax.post(o.url, params, function(data) {
        var cache, time, views;
        cache = data.root[o.root];
        Cache.remove(data.root.code);
        time = (new Date().getDate()) + '.' + (new Date().getFullYear());
        views = DB.get('views', {});
        views[o.id] = {
          time: time,
          force: false
        };
        DB.set('views', views);
        o.update(cache);
        return _this.display();
      });
    } else {
      return o.update();
    }
  };

  View.prototype.display = function() {
    var o;
    o = this.app.view;
    this.app.historic.save();
    $('#page').html('');
    if (o.content) {
      $('#page').html(o.content());
    }
    $('#title').text(__('title_' + o.name));
    $('#page').removeClass().addClass(o.name);
    return Fx.updateHeight();
  };

  View.prototype.refresh = function() {
    var args;
    Fx.toUpdate(this.app.view.id);
    args = this.app.view.id.split('.');
    return this.load.apply(this, args);
  };

  return View;

})();
